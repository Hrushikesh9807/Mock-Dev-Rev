You are a dataset generator, Your task is to generate more query solution pairs similar to these examples. 
You may make use of the tools listed below to generate the pairs. You MUST NOT use tools that are not in the list of tools. 
The tool descriptions are given to you. The tools used in the examples may be different from the list of tools given. BUT your examples should be from the tool list.
REMEMBER to keep each example wrapped with 'Example:' and <solution>. Keep the examples as diverse as possible and do not output the given examples
1. First generate few queries that you think could be answered using the existing tools. You may use new usernames, ids, org names other than mentioned in the examples.
2. Then for each of these examples generate a query thought pair. **If you think the query cannot be solved then keep the thoughts as an empty list ie output '[]'**.
3. Verify your results, ask your self if the thoughts, tools are actually relevant to the query if they are output the query thoought pairs together. 
**Else keep the thoughts empty list and output 'query' <solutoin> [] </solution>**
TOOl LIST: 
[
  {
      "tool_name": "who_am_i",
      "tool_description": "Returns the id of the current user",
      "args": [],
      "output": {
          "arg_type": "str",
          "is_array": false,
          "is_required": true
      }
  },
  {
      "tool_name": "get_sprint_id",
      "tool_description": "Returns the ID\nof the current\nsprint",
      "args": [],
      "output": {
          "arg_type": "str",
          "is_array": false,
          "is_required": true
      }
  },
  {
      "tool_name": "works_list",
      "tool_description": "Returns a list of work items matching the request",
      "args": [
          {
              "arg_name": "applies_to_part",
              "arg_type": "str",
              "is_array": true,
              "is_required": false
          },
          {
              "arg_name": "created_by",
              "arg_type": "str",
              "is_array": true,
              "is_required": false
          },
          {
              "arg_name": "issue_priority",
              "arg_type": "str",
              "is_array": true,
              "is_required": false
          },
          {
              "arg_name": "issue.rev_orgs",
              "arg_type": "str",
              "is_array": true,
              "is_required": false
          },
          {
              "arg_name": "limit",
              "arg_type": "int",
              "is_array": false,
              "is_required": false
          },
          {
              "arg_name": "owned_by",
              "arg_type": "str",
              "is_array": true,
              "is_required": false
          },
          {
              "arg_name": "stage_name",
              "arg_type": "str",
              "is_array": true,
              "is_required": false
          },
          {
              "arg_name": "ticket_need_response",
              "arg_type": "boolean",
              "is_array": false,
              "is_required": false
          },
          {
              "arg_name": "ticket_rev_org",
              "arg_type": "str",
              "is_array": true,
              "is_required": false
          },
          {
              "arg_name": "ticket_severity",
              "arg_type": "str",
              "is_array": true,
              "is_required": false
          },
          {
              "arg_name": "ticket_source_channel",
              "arg_type": "str",
              "is_array": true,
              "is_required": false
          },
          {
              "arg_name": "type",
              "arg_type": "str",
              "is_array": true,
              "is_required": false
          }
      ],
      "output": {
          "arg_type": "any",
          "is_array": false,
          "is_required": true
      }
  },
  {
      "tool_name": "summarize_objects",
      "tool_description": "Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail.",
      "args": [
          {
              "arg_name": "objects",
              "arg_type": "any",
              "is_array": true,
              "is_required": true
          }
      ],
      "output": {
          "arg_type": "any",
          "is_array": false,
          "is_required": true
      }
  },
  {
      "tool_name": "prioritize_objects",
      "tool_description": "Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail",
      "args": [
          {
              "arg_name": "objects",
              "arg_type": "any",
              "is_array": false,
              "is_required": false
          }
      ],
      "output": {
          "arg_type": "any",
          "is_array": true,
          "is_required": true
      }
  },
  {
      "tool_name": "add_work_items_to_sprint",
      "tool_description": "Adds the given work items to the sprint",
      "args": [
          {
              "arg_name": "work_ids",
              "arg_type": "str",
              "is_array": true,
              "is_required": true
          },
          {
              "arg_name": "sprint_id",
              "arg_type": "str",
              "is_array": false,
              "is_required": true
          }
      ],
      "output": {
          "arg_type": "boolean",
          "is_array": false,
          "is_required": true
      }
  },
  {
      "tool_name": "get_similar_work_items",
      "tool_description": "Returns a list of work items that are similar to the given work item",
      "args": [
          {
              "arg_name": "work_id",
              "arg_type": "str",
              "is_array": false,
              "is_required": true
          }
      ],
      "output": {
          "arg_type": "str",
          "is_array": true,
          "is_required": true
      }
  },
  {
      "tool_name": "search_object_by_name",
      "tool_description": "Given a search string, returns the id of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest",
      "args": [
          {
              "arg_name": "query",
              "arg_type": "str",
              "is_array": false,
              "is_required": true
          }
      ],
      "output": {
          "arg_type": "any",
          "is_array": false,
          "is_required": true
      }
  },
  {
      "tool_name": "create_actionable_tasks_from_text",
      "tool_description": "Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.",
      "args": [
          {
              "arg_name": "text",
              "arg_type": "str",
              "is_array": false,
              "is_required": true
          }
      ],
      "output": {
          "arg_type": "str",
          "is_array": true,
          "is_required": true
      }
  }
]

TOOL DESCRIPTIONS:
who_am_i: The 'who_am_i' tool is a simple API command that returns the identification of the current user, making it useful for determining user context within a system. It does not require any arguments to be passed, as the tool automatically detects and retrieves the relevant user information. The output of this tool is a string containing the user ID, which can be used in subsequent API calls or for logging and tracking purposes.
get_sprint_id: The tool "get\_sprint\_id" is designed to retrieve the unique identifier of the currently active sprint in an agile project management system. It does not require any input arguments, as it automatically detects and fetches information about the ongoing sprint. The output of this tool is a string representing the sprint ID, which can be used for various purposes such as tracking progress, generating reports, or integrating with other tools to automate processes. In summary, get\_sprint\_id is a valuable tool for developers working on agile projects, providing a quick and easy way to access important sprint information.
works_list: The `works_list` tool retrieves a list of work items based on the provided arguments, making it useful for filtering and managing tasks within a project. Its arguments include various options like `applies_to_part`, `created_by`, `issue_priority`, and others, which are primarily strings (some accepting arrays) or a boolean for `ticket_need_response`, allowing for flexible query customization. The tool returns a list of matching work items in any format, as indicated by the 'any' arg_type in the output description.
summarize_objects: The tool "summarize\_objects" is designed to consolidate and provide a brief overview of a list of objects, with the summarization logic varying based on the object type. It accepts a single required argument, "objects", which should be an array of any data type. The output of this tool is a single summarized object, which can be of any data type, depending on the input provided. This tool is particularly useful when dealing with large and complex data structures, where it is essential to quickly grasp the key details.
prioritize_objects: The tool `prioritize_objects` is designed to accept a single input of any data type, which can optionally be an array of objects, and returns an array of objects sorted by priority. The priority logic for each object is determined internally based on specific implementation details. This tool is useful when you need to organize a collection of items based on their importance, relevance, or urgency, allowing developers to easily manage their data according to predefined priority rules.
add_work_items_to_sprint: The `add_work_items_to_sprint` tool allows developers to add specified work items to a sprint by providing their unique IDs. It accepts two required arguments: `work_ids`, which is an array of strings representing the IDs of the work items, and `sprint_id`, which is a string representing the ID of the sprint to which the items will be added. The tool returns a boolean value indicating whether the operation was successful or not, making it easy to manage sprint workloads programmatically.
get_similar_work_items: The "get\_similar\_work\_items" tool is designed to find and return a list of work items that bear resemblance to a specified work item. It accepts a single required string argument, "work\_id", which uniquely identifies the work item in question. Upon successful execution, the tool generates an array of strings as output, representing the IDs of the similar work items found. This tool can be useful for developers in identifying related tasks, tracking progress across connected work items, or performing data analysis on similar tasks within a project.
search_object_by_name: The tool "search\_object\_by\_name" is designed to find an object's ID in the system of record based on a provided search string. It accepts a single argument, "query", which is a required string input. The tool returns the ID of the matching object with the highest confidence if there are multiple matches. This functionality is useful for developers looking to quickly and accurately locate specific objects in their system using a simple search query.
create_actionable_tasks_from_text: The "create\_actionable\_tasks\_from\_text" tool analyzes input text and identifies potential action items, generating a list of tasks as output. It requires a single string argument, 'text', which serves as the source for task extraction. The tool's output is an array of strings, each representing an actionable task derived from the input text, making it useful for organizing and tracking follow-up activities based on textual data, such as emails, meeting minutes, or project documents.

EXAMPLES:

    'Example: Query: List work items owned by ’DEVU-789’ needing response for organization ’REV-654’ '
    '<Solution>
    [
    {
        "thought": "First, we need to list the work items created by users 'DEVU-123' or 'DEVU-456' that also need a response.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['DEVU-123', 'DEVU-456'], 'type' = ['issue', 'task'], and 'ticket_need_response' = true."
    }
    ]
    </Solution>


    'Example: Query: List issues with ’blocker’ severity categorized as tickets '
    '<Solution>
    [
    {
        "thought": "First, we need to list all issues with 'blocker' severity and filter them to include only those categorized as tickets.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'ticket_severity' = ['blocker'] and 'type' = ['ticket']."
    }
    ]
    </Solution>
    

    'Example: Query: Find issues or tasks created by users ’DEVU-123’ or ’DEVU-456’ '
    '<Solution>
    [
    {
        "thought": "First, we need to retrieve all issues and tasks created by the specified users, 'DEVU-123' and 'DEVU-456'.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['DEVU-123', 'DEVU-456'] and 'type' = ['issue', 'task']."
    }
    ]
    </Solution>
    

    'Example: Query: Fetch ’p3’ priority work items that need customer response for ’REV-333’ '
    '<Solution>
    [
    {
        "thought": "First, we need to identify all work items that have a priority level of 'p3' and also require a customer response.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'issue.priority' = ['p3'], 'ticket_need_response' = true, and 'ticket_rev_org' = ['REV-333']."
    }
    ]
    </Solution>
    

    'Example: Query: list their high-severity tickets for ’Globex’ user '
    '<Solution>
    [
    {
        "thought": "First, we need to find the user ID for 'Globex' using the search_object_by_name tool.",
        "tool_name": "search_object_by_name",
        "task": "Use the search_object_by_name tool with the argument 'query' = 'Globex'."
    },
    {
        "thought": "Next, we will use the retrieved user ID to list all high-severity tickets created by this user.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = '$$PREV[0]', 'ticket_severity' = ['high'], and 'type' = ['ticket']."
    }
    ]
    </Solution>
    

    'Example: Query: Assign validated ’TASK-789’ and ’ISSUE-321’ to current user and sync with calendar '
    '<Solution>
    [
    {
        "thought": "First, we need to identify the current user using the who_am_i tool.",
        "tool_name": "who_am_i",
        "task": "Use the who_am_i tool to get the current user's ID."
    },
    {
        "thought": "Next, we need to validate the dependencies for the work items 'TASK-789' and 'ISSUE-321'.",
        "tool_name": "validate_work_dependency",
        "task": "Use the validate_work_dependency tool with the argument 'work_item_ids' = ['TASK-789', 'ISSUE-321']."
    },
    {
        "thought": "Then, we assign the validated work items to the current user.",
        "tool_name": "assign_work_items",
        "task": "Use the assign_work_items tool with the arguments: 'work_item_ids' = ['TASK-789', 'ISSUE-321'] and 'user_id' = '$$PREV[0]'."
    },
    {
        "thought": "Finally, we need to sync the assigned work items with the user's calendar.",
        "tool_name": "sync_work_items_with_calendar",
        "task": "Use the sync_work_items_with_calendar tool with the arguments: 'user_id' = '$$PREV[0]' and 'work_item_ids' = ['TASK-789', 'ISSUE-321']."
    }
]

    </Solution>
    

    'Example: Query: Summarize tickets from ’support’ channel '
    '<Solution>
    [
    {
        "thought": "First, we need to retrieve all tickets that originate from the 'support' channel.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'ticket_source_channel' = ['support'] and 'type' = ['ticket']."
    },
    {
        "thought": "Next, we need to summarize the tickets obtained from the previous step.",
        "tool_name": "summarize_objects",
        "task": "Use the summarize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
    ]
    </Solution>
    

    'Example: Query: Prioritize tasks for part ’ENH-789’ '
    '<Solution>
    [
    {
        "thought": "First, we need to retrieve all tasks that apply to the part 'ENH-789'.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'applies_to_part' = ['ENH-789']."
    },
    {
        "thought": "Next, we need to prioritize the tasks retrieved from the previous step.",
        "tool_name": "prioritize_objects",
        "task": "Use the prioritize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]

    </Solution>
    

    'Example: Query: Fetch ’medium’ severity work items in ’QA Review’ or ’Testing’ '
    '<Solution>
    [
    {
        "thought": "First, we need to retrieve all work items that have a severity level of 'medium' and are currently in the stages 'QA Review' or 'Testing'.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'ticket_severity' = ['medium'] and 'stage_name' = ['QA Review', 'Testing']."
    }
]
    </Solution>
    

    'Example: Query: Assign ’TASK-123’ and ’TASK-456’ to ’DEVU-999’ and sync with their calendar '
    '<Solution>
    [
    {
        "thought": "First, we need to assign the work items 'TASK-123' and 'TASK-456' to the user 'DEVU-999'.",
        "tool_name": "assign_work_items",
        "task": "Use the assign_work_items tool with the arguments: 'work_item_ids' = ['TASK-123', 'TASK-456'] and 'user_id' = 'DEVU-999'."
    },
    {
        "thought": "Next, we need to sync the assigned work items with the calendar of 'DEVU-999'.",
        "tool_name": "sync_work_items_with_calendar",
        "task": "Use the sync_work_items_with_calendar tool with the arguments: 'user_id' = 'DEVU-999' and 'work_item_ids' = ['TASK-123', 'TASK-456']."
    }
]

    </Solution>
    

    'Example: Query: Check dependencies for ’FEAT-123’ and ’BUG-987’ then add to sprint '
    '<Solution>
    [
    {
        "thought": "First, we need to validate the dependencies for the work items 'FEAT-123' and 'BUG-987'.",
        "tool_name": "validate_work_dependency",
        "task": "Use the validate_work_dependency tool with the argument 'work_item_ids' = ['FEAT-123', 'BUG-987']."
    },
    {
        "thought": "Next, we need to retrieve the current sprint ID to which the work items will be added.",
        "tool_name": "get_sprint_id",
        "task": "Use the get_sprint_id tool to obtain the current sprint ID."
    },
    {
        "thought": "Finally, we need to add the validated work items to the current sprint using the obtained sprint ID.",
        "tool_name": "add_work_items_to_sprint",
        "task": "Use the add_work_items_to_sprint tool with the arguments: 'work_ids' = ['FEAT-123', 'BUG-987'] and 'sprint_id' = '$$PREV[1]'."
    }
]

    </Solution>
    
are these 50 generated examples differen from the input examples , and are valid for the rules 1. Shouldn't repeat  2. the tools should satisfy the query properly, 3. the tools should be from the tool list. 
'Example: Query: Can you list work items owned by "user-897" with a high priority? '
'<Solution>
[
    {
        "thought": "First, we need to retrieve all work items that are owned by \"user-897\" and have a high priority.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'owned_by' = ['user-897'] and 'issue_priority' = ['high']."
    }
]
</Solution>'

'Example: Query: What is the sprint ID for the current sprint? '
'<Solution>
[
    {
        "thought": "We can use the get_sprint_id tool to retrieve the ID of the current sprint.",
        "tool_name": "get_sprint_id",
        "task": "Use the get_sprint_id tool to get the current sprint ID."
    }
]
</Solution>'

'Example: Query: Find the work items that are similar to work item "T-1234".'
'<Solution>
[
    {
        "thought": "We can use the get_similar_work_items tool to find similar work items to the provided one.",
        "tool_name": "get_similar_work_items",
        "task": "Use the get_similar_work_items tool with the argument 'work_id' = 'T-1234'."
    }
]
</Solution>'

'Example: Query: Can you find all work items that have been created by "user-123" in the "Development" stage? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to retrieve all work items created by \"user-123\" and currently in the \"Development\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-123'] and 'stage_name' = ['Development']."
    }
]
</Solution>'

'Example: Query: List the work items that need a response and have been created by "user-456". '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to retrieve all work items that require a response and were created by \"user-456\".",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-456'] and 'ticket_need_response' = true."
    }
]
</Solution>'

'Example: Query: Can you summarize all work items related to the "Project Alpha" project? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items related to the \"Project Alpha\" project.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'applies_to_part' = ['Project Alpha']."
    },
    {
        "thought": "Then, we can summarize the retrieved work items.",
        "tool_name": "summarize_objects",
        "task": "Use the summarize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: List all work items that were created by "user-789" for organization "Org-XYZ" and have a medium severity. '
'<Solution>
[
    {
        "thought": "We need to retrieve all work items that were created by \"user-789\", belong to organization \"Org-XYZ\", and have a medium severity.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-789'], 'ticket_rev_org' = ['Org-XYZ'], and 'ticket_severity' = ['medium']."
    }
]
</Solution>'

'Example: Query: Get the ID of the "Product-X" project. '
'<Solution>
[
    {
        "thought": "We can use the search_object_by_name tool to find the ID of the \"Product-X\" project.",
        "tool_name": "search_object_by_name",
        "task": "Use the search_object_by_name tool with the argument 'query' = 'Product-X'."
    }
]
</Solution>'

'Example: Query: Can you find the most recently created work item in the "Testing" stage? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items in the \"Testing\" stage and then sort them by creation date.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'stage_name' = ['Testing']."
    },
    {
        "thought": "Next, we can sort the retrieved work items by creation date.",
        "tool_name": "prioritize_objects",
        "task": "Use the prioritize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: I need to add work items "W-123", "W-456", and "W-789" to the current sprint. '
'<Solution>
[
    {
        "thought": "First, we need to retrieve the ID of the current sprint.",
        "tool_name": "get_sprint_id",
        "task": "Use the get_sprint_id tool to get the current sprint ID."
    },
    {
        "thought": "Then, we can add the work items to the current sprint.",
        "tool_name": "add_work_items_to_sprint",
        "task": "Use the add_work_items_to_sprint tool with the arguments: 'work_ids' = ['W-123', 'W-456', 'W-789'] and 'sprint_id' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: Can you prioritize all work items related to "Feature-Y"? '
'<Solution>
[
    {
        "thought": "We need to find all work items related to \"Feature-Y\" using the works_list tool.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'applies_to_part' = ['Feature-Y']."
    },
    {
        "thought": "Then, we need to prioritize the retrieved work items.",
        "tool_name": "prioritize_objects",
        "task": "Use the prioritize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: List all work items that are owned by "user-111" and are in the "Backlog" stage. '
'<Solution>
[
    {
        "thought": "We need to find all work items owned by \"user-111\" that are in the \"Backlog\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'owned_by' = ['user-111'] and 'stage_name' = ['Backlog']."
    }
]
</Solution>'

'Example: Query: List all work items that were created by "user-222" and require a customer response. '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to retrieve all work items that were created by \"user-222\" and need a customer response.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-222'] and 'ticket_need_response' = true."
    }
]
</Solution>'

'Example: Query: Find the work item with the ID "W-555". '
'<Solution>
[
    {
        "thought": "We can use the search_object_by_name tool to find the work item with the ID \"W-555\".",
        "tool_name": "search_object_by_name",
        "task": "Use the search_object_by_name tool with the argument 'query' = 'W-555'."
    }
]
</Solution>'

'Example: Query: Get the ID of the "user-333". '
'<Solution>
[
    {
        "thought": "We can use the search_object_by_name tool to find the ID of \"user-333\".",
        "tool_name": "search_object_by_name",
        "task": "Use the search_object_by_name tool with the argument 'query' = 'user-333'."
    }
]
</Solution>'

'Example: Query: List all work items that are owned by "user-444" and have a high priority. '
'<Solution>
[
    {
        "thought": "We need to retrieve all work items owned by \"user-444\" that have a high priority.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'owned_by' = ['user-444'] and 'issue_priority' = ['high']."
    }
]
</Solution>'

'Example: Query: List all work items that have a low priority and are in the "In Progress" stage. '
'<Solution>
[
    {
        "thought": "We need to find all work items that have a low priority and are in the \"In Progress\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'issue_priority' = ['low'] and 'stage_name' = ['In Progress']."
    }
]
</Solution>'

'Example: Query: Can you find work items that are similar to work item "T-9999"? '
'<Solution>
[
    {
        "thought": "We can use the get_similar_work_items tool to find similar work items to the provided one.",
        "tool_name": "get_similar_work_items",
        "task": "Use the get_similar_work_items tool with the argument 'work_id' = 'T-9999'."
    }
]
</Solution>'

'Example: Query: Can you provide a summary of all work items related to the "Project Beta" project? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items related to the \"Project Beta\" project.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'applies_to_part' = ['Project Beta']."
    },
    {
        "thought": "Then, we can summarize the retrieved work items.",
        "tool_name": "summarize_objects",
        "task": "Use the summarize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: Can you prioritize all work items that are in the "Done" stage? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items in the \"Done\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'stage_name' = ['Done']."
    },
    {
        "thought": "Then, we need to prioritize the retrieved work items.",
        "tool_name": "prioritize_objects",
        "task": "Use the prioritize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: Get the ID of the "user-555". '
'<Solution>
[
    {
        "thought": "We can use the search_object_by_name tool to find the ID of \"user-555\".",
        "tool_name": "search_object_by_name",
        "task": "Use the search_object_by_name tool with the argument 'query' = 'user-555'."
    }
]
</Solution>'

'Example: Query: List work items created by "user-666" with a high priority. '
'<Solution>
[
    {
        "thought": "We need to retrieve all work items that are owned by \"user-666\" and have a high priority.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-666'] and 'issue_priority' = ['high']."
    }
]
</Solution>'

'Example: Query: List all work items that have a medium priority and are in the "To Do" stage. '
'<Solution>
[
    {
        "thought": "We need to find all work items that have a medium priority and are in the \"To Do\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'issue_priority' = ['medium'] and 'stage_name' = ['To Do']."
    }
]
</Solution>'

'Example: Query: Can you find work items that are similar to work item "T-12345"? '
'<Solution>
[
    {
        "thought": "We can use the get_similar_work_items tool to find similar work items to the provided one.",
        "tool_name": "get_similar_work_items",
        "task": "Use the get_similar_work_items tool with the argument 'work_id' = 'T-12345'."
    }
]
</Solution>'

'Example: Query: Can you provide a summary of all work items related to the "Project Gamma" project? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items related to the \"Project Gamma\" project.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'applies_to_part' = ['Project Gamma']."
    },
    {
        "thought": "Then, we can summarize the retrieved work items.",
        "tool_name": "summarize_objects",
        "task": "Use the summarize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: I need to add work items "W-111", "W-222", and "W-333" to the current sprint. '
'<Solution>
[
    {
        "thought": "First, we need to retrieve the ID of the current sprint.",
        "tool_name": "get_sprint_id",
        "task": "Use the get_sprint_id tool to get the current sprint ID."
    },
    {
        "thought": "Then, we can add the work items to the current sprint.",
        "tool_name": "add_work_items_to_sprint",
        "task": "Use the add_work_items_to_sprint tool with the arguments: 'work_ids' = ['W-111', 'W-222', 'W-333'] and 'sprint_id' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: List all work items that are owned by "user-777" and are in the "Blocked" stage. '
'<Solution>
[
    {
        "thought": "We need to find all work items owned by \"user-777\" that are in the \"Blocked\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'owned_by' = ['user-777'] and 'stage_name' = ['Blocked']."
    }
]
</Solution>'

'Example: Query: List all work items that were created by "user-888" and require a customer response. '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to retrieve all work items that were created by \"user-888\" and need a customer response.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-888'] and 'ticket_need_response' = true."
    }
]
</Solution>'

'Example: Query: Can you prioritize all work items that are in the "Ready for Review" stage? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items in the \"Ready for Review\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'stage_name' = ['Ready for Review']."
    },
    {
        "thought": "Then, we need to prioritize the retrieved work items.",
        "tool_name": "prioritize_objects",
        "task": "Use the prioritize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: List work items created by "user-999" with a medium priority. '
'<Solution>
[
    {
        "thought": "We need to retrieve all work items that are owned by \"user-999\" and have a medium priority.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-999'] and 'issue_priority' = ['medium']."
    }
]
</Solution>'

'Example: Query: Get the ID of the "user-1000". '
'<Solution>
[
    {
        "thought": "We can use the search_object_by_name tool to find the ID of \"user-1000\".",
        "tool_name": "search_object_by_name",
        "task": "Use the search_object_by_name tool with the argument 'query' = 'user-1000'."
    }
]
</Solution>'

'Example: Query: List all work items that are owned by "user-1111" and are in the "Review" stage. '
'<Solution>
[
    {
        "thought": "We need to find all work items owned by \"user-1111\" that are in the \"Review\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'owned_by' = ['user-1111'] and 'stage_name' = ['Review']."
    }
]
</Solution>'

'Example: Query: Can you find all work items that are in the "Done" stage and were created by "user-1212"? '
'<Solution>
[
    {
        "thought": "We need to find all work items that are in the \"Done\" stage and were created by \"user-1212\".",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-1212'] and 'stage_name' = ['Done']."
    }
]
</Solution>'

'Example: Query: Can you find work items that are similar to work item "T-11111"? '
'<Solution>
[
    {
        "thought": "We can use the get_similar_work_items tool to find similar work items to the provided one.",
        "tool_name": "get_similar_work_items",
        "task": "Use the get_similar_work_items tool with the argument 'work_id' = 'T-11111'."
    }
]
</Solution>'

'Example: Query: Can you provide a summary of all work items related to the "Project Delta" project? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items related to the \"Project Delta\" project.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'applies_to_part' = ['Project Delta']."
    },
    {
        "thought": "Then, we can summarize the retrieved work items.",
        "tool_name": "summarize_objects",
        "task": "Use the summarize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: Can you prioritize all work items that are in the "Ready for Testing" stage? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items in the \"Ready for Testing\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'stage_name' = ['Ready for Testing']."
    },
    {
        "thought": "Then, we need to prioritize the retrieved work items.",
        "tool_name": "prioritize_objects",
        "task": "Use the prioritize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: List work items created by "user-1313" with a low priority. '
'<Solution>
[
    {
        "thought": "We need to retrieve all work items that are owned by \"user-1313\" and have a low priority.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-1313'] and 'issue_priority' = ['low']."
    }
]
</Solution>'

'Example: Query: List all work items that have a high priority and are in the "In Progress" stage. '
'<Solution>
[
    {
        "thought": "We need to find all work items that have a high priority and are in the \"In Progress\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'issue_priority' = ['high'] and 'stage_name' = ['In Progress']."
    }
]
</Solution>'

'Example: Query: Can you find work items that are similar to work item "T-22222"? '
'<Solution>
[
    {
        "thought": "We can use the get_similar_work_items tool to find similar work items to the provided one.",
        "tool_name": "get_similar_work_items",
        "task": "Use the get_similar_work_items tool with the argument 'work_id' = 'T-22222'."
    }
]
</Solution>'

'Example: Query: Can you provide a summary of all work items related to the "Project Epsilon" project? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items related to the \"Project Epsilon\" project.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'applies_to_part' = ['Project Epsilon']."
    },
    {
        "thought": "Then, we can summarize the retrieved work items.",
        "tool_name": "summarize_objects",
        "task": "Use the summarize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: I need to add work items "W-444", "W-555", and "W-666" to the current sprint. '
'<Solution>
[
    {
        "thought": "First, we need to retrieve the ID of the current sprint.",
        "tool_name": "get_sprint_id",
        "task": "Use the get_sprint_id tool to get the current sprint ID."
    },
    {
        "thought": "Then, we can add the work items to the current sprint.",
        "tool_name": "add_work_items_to_sprint",
        "task": "Use the add_work_items_to_sprint tool with the arguments: 'work_ids' = ['W-444', 'W-555', 'W-666'] and 'sprint_id' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: List all work items that are owned by "user-1414" and are in the "Ready for Deployment" stage. '
'<Solution>
[
    {
        "thought": "We need to find all work items owned by \"user-1414\" that are in the \"Ready for Deployment\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'owned_by' = ['user-1414'] and 'stage_name' = ['Ready for Deployment']."
    }
]
</Solution>'

'Example: Query: List all work items that were created by "user-1515" and require a customer response. '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to retrieve all work items that were created by \"user-1515\" and need a customer response.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-1515'] and 'ticket_need_response' = true."
    }
]
</Solution>'

'Example: Query: Can you prioritize all work items that are in the "Testing" stage? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items in the \"Testing\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'stage_name' = ['Testing']."
    },
    {
        "thought": "Then, we need to prioritize the retrieved work items.",
        "tool_name": "prioritize_objects",
        "task": "Use the prioritize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: List work items created by "user-1616" with a medium priority. '
'<Solution>
[
    {
        "thought": "We need to retrieve all work items that are owned by \"user-1616\" and have a medium priority.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-1616'] and 'issue_priority' = ['medium']."
    }
]
</Solution>'

'Example: Query: Get the ID of the "user-1717". '
'<Solution>
[
    {
        "thought": "We can use the search_object_by_name tool to find the ID of \"user-1717\".",
        "tool_name": "search_object_by_name",
        "task": "Use the search_object_by_name tool with the argument 'query' = 'user-1717'."
    }
]
</Solution>'

'Example: Query: List all work items that are owned by "user-1818" and are in the "Ready for Review" stage. '
'<Solution>
[
    {
        "thought": "We need to find all work items owned by \"user-1818\" that are in the \"Ready for Review\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'owned_by' = ['user-1818'] and 'stage_name' = ['Ready for Review']."
    }
]
</Solution>'

'Example: Query: Can you find all work items that are in the "To Do" stage and were created by "user-1919"? '
'<Solution>
[
    {
        "thought": "We need to find all work items that are in the \"To Do\" stage and were created by \"user-1919\".",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-1919'] and 'stage_name' = ['To Do']."
    }
]
</Solution>'

'Example: Query: Can you find work items that are similar to work item "T-33333"? '
'<Solution>
[
    {
        "thought": "We can use the get_similar_work_items tool to find similar work items to the provided one.",
        "tool_name": "get_similar_work_items",
        "task": "Use the get_similar_work_items tool with the argument 'work_id' = 'T-33333'."
    }
]
</Solution>'

'Example: Query: Can you provide a summary of all work items related to the "Project Zeta" project? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items related to the \"Project Zeta\" project.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'applies_to_part' = ['Project Zeta']."
    },
    {
        "thought": "Then, we can summarize the retrieved work items.",
        "tool_name": "summarize_objects",
        "task": "Use the summarize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: Can you prioritize all work items that are in the "Blocked" stage? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items in the \"Blocked\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'stage_name' = ['Blocked']."
    },
    {
        "thought": "Then, we need to prioritize the retrieved work items.",
        "tool_name": "prioritize_objects",
        "task": "Use the prioritize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: List work items created by "user-2020" with a low priority. '
'<Solution>
[
    {
        "thought": "We need to retrieve all work items that are owned by \"user-2020\" and have a low priority.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'created_by' = ['user-2020'] and 'issue_priority' = ['low']."
    }
]
</Solution>'

'Example: Query: List all work items that have a medium priority and are in the "In Progress" stage. '
'<Solution>
[
    {
        "thought": "We need to find all work items that have a medium priority and are in the \"In Progress\" stage.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the arguments: 'issue_priority' = ['medium'] and 'stage_name' = ['In Progress']."
    }
]
</Solution>'

'Example: Query: Can you find work items that are similar to work item "T-44444"? '
'<Solution>
[
    {
        "thought": "We can use the get_similar_work_items tool to find similar work items to the provided one.",
        "tool_name": "get_similar_work_items",
        "task": "Use the get_similar_work_items tool with the argument 'work_id' = 'T-44444'."
    }
]
</Solution>'

'Example: Query: Can you provide a summary of all work items related to the "Project Eta" project? '
'<Solution>
[
    {
        "thought": "We can use the works_list tool to find all work items related to the \"Project Eta\" project.",
        "tool_name": "works_list",
        "task": "Use the works_list tool with the argument 'applies_to_part' = ['Project Eta']."
    },
    {
        "thought": "Then, we can summarize the retrieved work items.",
        "tool_name": "summarize_objects",
        "task": "Use the summarize_objects tool with the argument 'objects' = '$$PREV[0]'."
    }
]
</Solution>'

'Example: Query: I need to add work items "W-777", "W-888", and "W-999" to the current sprint. '
'<Solution>
[
    {
        "thought": "First, we need to retrieve the ID of the current sprint.",
        "tool_name": "get_sprint_id",
        "task": "Use the get_sprint_id tool to get the current sprint ID."
    },
    {
        "thought": "Then, we can add the work items to the current sprint.",
        "tool_name": "add_work_items_to_sprint",
        "task": "Use the add_work_items_to_sprint tool with the arguments: 'work_ids' = ['W-777', 'W-888', 'W-999'] and 'sprint_id' = '$$PREV[0]'."
    }
]
</Solution>'

